/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.casino.dsl.ide.contentassist.antlr.internal.InternalDslParser;
import org.xtext.casino.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSubmoduleAccess().getEntitiesAlternatives_4_0(), "rule__Submodule__EntitiesAlternatives_4_0");
			builder.put(grammarAccess.getSubOperationAccess().getAlternatives(), "rule__SubOperation__Alternatives");
			builder.put(grammarAccess.getSubTransactionAccess().getAlternatives(), "rule__SubTransaction__Alternatives");
			builder.put(grammarAccess.getComponentNameAccess().getAlternatives(), "rule__ComponentName__Alternatives");
			builder.put(grammarAccess.getLayerNameAccess().getAlternatives(), "rule__LayerName__Alternatives");
			builder.put(grammarAccess.getLayerSegmentNameAccess().getAlternatives(), "rule__LayerSegmentName__Alternatives");
			builder.put(grammarAccess.getSublayerSegmentNameAccess().getAlternatives(), "rule__SublayerSegmentName__Alternatives");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getSubmoduleAccess().getGroup(), "rule__Submodule__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getGeneralEntityAccess().getGroup(), "rule__GeneralEntity__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getSpecialEntityAccess().getGroup(), "rule__SpecialEntity__Group__0");
			builder.put(grammarAccess.getTransactionAccess().getGroup(), "rule__Transaction__Group__0");
			builder.put(grammarAccess.getOperatesonAccess().getGroup(), "rule__Operateson__Group__0");
			builder.put(grammarAccess.getRelationDomAccess().getGroup(), "rule__RelationDom__Group__0");
			builder.put(grammarAccess.getArchitectureAccess().getGroup(), "rule__Architecture__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getLayerAccess().getGroup(), "rule__Layer__Group__0");
			builder.put(grammarAccess.getLayerSegmentAccess().getGroup(), "rule__LayerSegment__Group__0");
			builder.put(grammarAccess.getLayerSegmentAccess().getGroup_3(), "rule__LayerSegment__Group_3__0");
			builder.put(grammarAccess.getLayerSegmentRelationAccess().getGroup(), "rule__LayerSegmentRelation__Group__0");
			builder.put(grammarAccess.getSublayerSegmentAccess().getGroup(), "rule__SublayerSegment__Group__0");
			builder.put(grammarAccess.getRelationArchAccess().getGroup(), "rule__RelationArch__Group__0");
			builder.put(grammarAccess.getTechnologyAccess().getGroup(), "rule__Technology__Group__0");
			builder.put(grammarAccess.getJavaAppAccess().getGroup(), "rule__JavaApp__Group__0");
			builder.put(grammarAccess.getReactAppAccess().getGroup(), "rule__ReactApp__Group__0");
			builder.put(grammarAccess.getSystemAccess().getDomAssignment_2(), "rule__System__DomAssignment_2");
			builder.put(grammarAccess.getSystemAccess().getArchAssignment_3(), "rule__System__ArchAssignment_3");
			builder.put(grammarAccess.getSystemAccess().getTechAssignment_4(), "rule__System__TechAssignment_4");
			builder.put(grammarAccess.getDomainAccess().getTypesAssignment_2(), "rule__Domain__TypesAssignment_2");
			builder.put(grammarAccess.getDomainAccess().getModulesAssignment_3(), "rule__Domain__ModulesAssignment_3");
			builder.put(grammarAccess.getDomainAccess().getRelationsAssignment_4(), "rule__Domain__RelationsAssignment_4");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getSubmodulesAssignment_3(), "rule__Module__SubmodulesAssignment_3");
			builder.put(grammarAccess.getSubmoduleAccess().getNameAssignment_1(), "rule__Submodule__NameAssignment_1");
			builder.put(grammarAccess.getSubmoduleAccess().getOperationsAssignment_3(), "rule__Submodule__OperationsAssignment_3");
			builder.put(grammarAccess.getSubmoduleAccess().getEntitiesAssignment_4(), "rule__Submodule__EntitiesAssignment_4");
			builder.put(grammarAccess.getOperationAccess().getTargetAssignment_5(), "rule__Operation__TargetAssignment_5");
			builder.put(grammarAccess.getEntityNameAccess().getNameAssignment(), "rule__EntityName__NameAssignment");
			builder.put(grammarAccess.getGeneralEntityAccess().getPropertiesAssignment_3(), "rule__GeneralEntity__PropertiesAssignment_3");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
			builder.put(grammarAccess.getSpecialEntityAccess().getPropertiesAssignment_3(), "rule__SpecialEntity__PropertiesAssignment_3");
			builder.put(grammarAccess.getSpecialEntityAccess().getTransactionsAssignment_4(), "rule__SpecialEntity__TransactionsAssignment_4");
			builder.put(grammarAccess.getTransactionAccess().getOperatesonAssignment_4(), "rule__Transaction__OperatesonAssignment_4");
			builder.put(grammarAccess.getOperatesonAccess().getOperatesonAssignment_1(), "rule__Operateson__OperatesonAssignment_1");
			builder.put(grammarAccess.getRelationDomAccess().getSourceAssignment_5(), "rule__RelationDom__SourceAssignment_5");
			builder.put(grammarAccess.getRelationDomAccess().getTargetAssignment_7(), "rule__RelationDom__TargetAssignment_7");
			builder.put(grammarAccess.getArchitectureAccess().getComponentesAssignment_2(), "rule__Architecture__ComponentesAssignment_2");
			builder.put(grammarAccess.getArchitectureAccess().getRelationArchAssignment_3(), "rule__Architecture__RelationArchAssignment_3");
			builder.put(grammarAccess.getComponentAccess().getLayerAssignment_3(), "rule__Component__LayerAssignment_3");
			builder.put(grammarAccess.getLayerAccess().getNameAssignment_1(), "rule__Layer__NameAssignment_1");
			builder.put(grammarAccess.getLayerAccess().getLayerSegmentsAssignment_3(), "rule__Layer__LayerSegmentsAssignment_3");
			builder.put(grammarAccess.getLayerSegmentAccess().getNameAssignment_1(), "rule__LayerSegment__NameAssignment_1");
			builder.put(grammarAccess.getLayerSegmentAccess().getRelationsAssignment_3_1(), "rule__LayerSegment__RelationsAssignment_3_1");
			builder.put(grammarAccess.getLayerSegmentAccess().getSublayerSegmentsAssignment_4(), "rule__LayerSegment__SublayerSegmentsAssignment_4");
			builder.put(grammarAccess.getSublayerSegmentAccess().getNameAssignment_1(), "rule__SublayerSegment__NameAssignment_1");
			builder.put(grammarAccess.getRelationArchAccess().getNameAssignment_1(), "rule__RelationArch__NameAssignment_1");
			builder.put(grammarAccess.getTechnologyAccess().getJavaAssignment_2(), "rule__Technology__JavaAssignment_2");
			builder.put(grammarAccess.getTechnologyAccess().getReactAssignment_3(), "rule__Technology__ReactAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
