/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.casino.dsl.ide.contentassist.antlr.internal.InternalDslParser;
import org.xtext.casino.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSubmoduleAccess().getEntitiesAlternatives_4_0(), "rule__Submodule__EntitiesAlternatives_4_0");
			builder.put(grammarAccess.getSubOperationAccess().getAlternatives(), "rule__SubOperation__Alternatives");
			builder.put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
			builder.put(grammarAccess.getSubTransactionAccess().getAlternatives(), "rule__SubTransaction__Alternatives");
			builder.put(grammarAccess.getRelationDomAccess().getAlternatives(), "rule__RelationDom__Alternatives");
			builder.put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getSubmoduleAccess().getGroup(), "rule__Submodule__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getGeneralEntityAccess().getGroup(), "rule__GeneralEntity__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getSpecialEntityAccess().getGroup(), "rule__SpecialEntity__Group__0");
			builder.put(grammarAccess.getTransactionAccess().getGroup(), "rule__Transaction__Group__0");
			builder.put(grammarAccess.getRelationDomAccess().getGroup_0(), "rule__RelationDom__Group_0__0");
			builder.put(grammarAccess.getRelationDomAccess().getGroup_1(), "rule__RelationDom__Group_1__0");
			builder.put(grammarAccess.getDomainAccess().getModulesAssignment_1(), "rule__Domain__ModulesAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getSubmodulesAssignment_3(), "rule__Module__SubmodulesAssignment_3");
			builder.put(grammarAccess.getSubmoduleAccess().getNameAssignment_1(), "rule__Submodule__NameAssignment_1");
			builder.put(grammarAccess.getSubmoduleAccess().getOperationsAssignment_3(), "rule__Submodule__OperationsAssignment_3");
			builder.put(grammarAccess.getSubmoduleAccess().getEntitiesAssignment_4(), "rule__Submodule__EntitiesAssignment_4");
			builder.put(grammarAccess.getSubmoduleAccess().getRelationsAssignment_5(), "rule__Submodule__RelationsAssignment_5");
			builder.put(grammarAccess.getGeneralEntityAccess().getNameAssignment_1(), "rule__GeneralEntity__NameAssignment_1");
			builder.put(grammarAccess.getGeneralEntityAccess().getPropertiesAssignment_3(), "rule__GeneralEntity__PropertiesAssignment_3");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
			builder.put(grammarAccess.getSpecialEntityAccess().getNameAssignment_1(), "rule__SpecialEntity__NameAssignment_1");
			builder.put(grammarAccess.getSpecialEntityAccess().getPropertiesAssignment_3(), "rule__SpecialEntity__PropertiesAssignment_3");
			builder.put(grammarAccess.getSpecialEntityAccess().getTransactionsAssignment_5(), "rule__SpecialEntity__TransactionsAssignment_5");
			builder.put(grammarAccess.getRelationDomAccess().getTypeAssignment_0_6(), "rule__RelationDom__TypeAssignment_0_6");
			builder.put(grammarAccess.getRelationDomAccess().getTypeAssignment_1_0(), "rule__RelationDom__TypeAssignment_1_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
