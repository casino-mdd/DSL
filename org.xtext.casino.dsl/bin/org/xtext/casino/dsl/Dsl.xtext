grammar org.xtext.casino.dsl.Dsl with org.eclipse.xtext.common.Terminals

generate dsl "http://www.xtext.org/casino/dsl/Dsl"

//---------------------- System ------------------------------------------------
System: 'Casino' '{' 
	dom=Domain
	arch=Architecture
	tech=Technology
	'}'
;

// --------------------- Domain ------------------------------------------------
Domain: 'domain' '{'
	(types+=Type)*
	(modules+=Module)+
	(relations+=RelationDom)+
	'}'
;	
 
Module: 'module' name=ID '{'
	(submodules+=Submodule)+
	'}' 
;
	
Submodule: 'submodule' name=ID '{'
	(operations+=Operation)+
	(entities+= (GeneralEntity | SpecialEntity) )+
	'}'
;

Operation: 'op' '{'
	'type:' SubOperation
	'operates_on:' target+=EntityName
	'}'	
;

EntityName:
     name=ID
;

SubOperation:
	'Read' | 'Create'
;

GeneralEntity: 
	'generalEntity' EntityName '{'
	(properties+=Property)+
	'}'
;

Property: 
	name=ID ':' type=[Type];

Type:
	'dataType' name=ID	
;

SpecialEntity: 
	'specialEntity' EntityName '{'
	(properties+=Property)+
	(transactions+=Transaction)+	
	'}'	
;
	
Transaction: 'trx' '{'
	'type:' SubTransaction
	(operateson+=Operateson)+
	'}'
;

SubTransaction:
	'exchange' | 'sale'
;

Operateson:
	'operates_on:' operateson+=EntityName
;

RelationDom: 'rel' '{'
	'type:' 'Composition'
	'source:' source+=EntityName
	'target:' target+=EntityName
	'}'
;

// --------------------- Architecture ----------------------------------------------

Architecture:
	'arch' '{'
		componentes+=Component+
		relationArch+=RelationArch+
	'}'
;
Component:
	'component' ComponentName '{' 
		layer+=Layer+		
	'}' 
;

ComponentName:
	'Back' | 'Front'	
;

Layer:
	'layer' name=LayerName '{'
		layerSegments+=LayerSegment*
	'}'
;

LayerName:
	'JavaScript' | 'Ejb' | 'War'
;

LayerSegment:
	'layerSegment' name=LayerSegmentName '{'
		('{' relations+=LayerSegmentRelation* '}')?
		sublayerSegments+=SublayerSegment*
	'}'	
;

LayerSegmentName: 
	'Services'|'Ui'|'Store'|'RestEntity'|'Pojo'|'Facade'|'Dto'|'Util'|'Containers'
;

LayerSegmentRelation:
	'allowedToUse:' LayerSegmentName
;

SublayerSegment:
	'sublayerSegment' name=SublayerSegmentName	
;

SublayerSegmentName:
	'Actions'|'Reducers'
;

RelationArch:
	'relationArch' name=ID '{'
		'source:' LayerName ','
		'target:' LayerName
	'}'
;

// --------------------- Technology ------------------------------------------------

Technology:
	'tech' '{'
		java=JavaApp
		react=ReactApp
	'}'
;
// --------------------- Backend----- ----------------------------------------------
JavaApp:
	'javaApp' '{'
	
	
	'}'
;
// --------------------- Frontend---- ----------------------------------------------

AbstractFrontElement:
	ReactApp | Functionality | Directory | JsModule | Type |
	RouterComponent | Container | Visualizer | ServiceFront |
	File | State | Action | ActionCreator | ActionDispatcher |
	Reducer;	
	
ReactApp:
'reactApp' '{'	
	(elements+=AbstractFrontElement)+
	('performs:' func=[Functionality])+
	('holds:' dir=[Directory])+
	('use:' mod=[JsModule])+
'}'
;

Functionality:
'functionality' name=ID '{' 
	('uses:' route=[RouterComponent])*
	('wraps:'wrap=[Container])*
	('render:'render=[Visualizer])+
	('state:'state=[State])*
	('calls:'service=[ServiceFront])*
	'organizedBy:' type=[Directory]
'}'
;

RouterComponent:
'router' name=ID '{'
	'inWithin:' type=[Directory]
	'use:' type=[JsModule]
	'route:' route=[UIComponent]
'}'
;

UIComponent:
	RouterComponent | Visualizer
;

Container:
'container' name=ID '{'
	'inWithin:' type=[Directory]
	('dispatch:' type=[ActionDispatcher])?
	('map:' type=[Reducer])*
	'use:' type=[JsModule]
'}'	
;

Visualizer:
'visualizer' name=ID '{'
	'inWithin:' type=[Directory]
	('use:' type=[JsModule])+
'}'
;

ServiceFront: 
'service' name=ID '{' 
	'use:' type=[JsModule]
	('method:' STRING)+
'}'
;


Directory:
'directory' name=ID '{' 
	('has:'+file=[File])*
	('contains:'subdirectory=[Directory])*
	'purpose:' STRING	
'}'
;

File:
	Md | Js | Json | Css;

Md:
'md' name=ID '{'
	'type:' STRING
'}'
;

Js: 
'js' name=ID '{'
	'type:' STRING
'}'
;

Json:
'json' name=ID '{'
	'type:' STRING
'}';

Css:
'css' name=ID '{'
	'type:' STRING
'}'
;

State:
'state' name=ID '{'
	('handleAction:' action=[Action])*
	('handleReducer:' reducer=[Reducer])*
'}'
;

Action:
'action' name=ID '{' 
	('create:'actionCreator=[ActionCreator])*
	('dispatch:'actionDispatcher=[ActionDispatcher])*
	'actionDirectory:' dir=[Directory]
'}'
;

ActionCreator:
'actionCreator' name=ID '{'
	'type:' STRING
'}'
;

ActionDispatcher:
'actionDispatcher' name=ID '{'
	('use:' type=[ActionCreator])*
'}'
;

Reducer:
'reducer' name=ID '{'
	('catch:' type=[ActionCreator])+
	'reducerDirectory:' type=[Directory]
'}'
;

JsModule:
'module' name=ID '{'
	'presentIn:' type=[Directory]
'}'
;