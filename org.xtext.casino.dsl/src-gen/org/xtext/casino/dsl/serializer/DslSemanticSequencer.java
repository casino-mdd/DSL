/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.casino.dsl.dsl.AbstractClass;
import org.xtext.casino.dsl.dsl.AbstractMethod;
import org.xtext.casino.dsl.dsl.ActionCreator;
import org.xtext.casino.dsl.dsl.ActionDispatcher;
import org.xtext.casino.dsl.dsl.Annotation;
import org.xtext.casino.dsl.dsl.Architecture;
import org.xtext.casino.dsl.dsl.Attribute;
import org.xtext.casino.dsl.dsl.Component;
import org.xtext.casino.dsl.dsl.Container;
import org.xtext.casino.dsl.dsl.Css;
import org.xtext.casino.dsl.dsl.Descriptor;
import org.xtext.casino.dsl.dsl.Directory;
import org.xtext.casino.dsl.dsl.Domain;
import org.xtext.casino.dsl.dsl.DslPackage;
import org.xtext.casino.dsl.dsl.Einterface;
import org.xtext.casino.dsl.dsl.EntityName;
import org.xtext.casino.dsl.dsl.Epackage;
import org.xtext.casino.dsl.dsl.Functionality;
import org.xtext.casino.dsl.dsl.GenericClass;
import org.xtext.casino.dsl.dsl.JavaApp;
import org.xtext.casino.dsl.dsl.JeeProject;
import org.xtext.casino.dsl.dsl.Js;
import org.xtext.casino.dsl.dsl.JsModule;
import org.xtext.casino.dsl.dsl.Json;
import org.xtext.casino.dsl.dsl.Layer;
import org.xtext.casino.dsl.dsl.LayerSegment;
import org.xtext.casino.dsl.dsl.Library;
import org.xtext.casino.dsl.dsl.Md;
import org.xtext.casino.dsl.dsl.MethodBack;
import org.xtext.casino.dsl.dsl.NativeClass;
import org.xtext.casino.dsl.dsl.Operateson;
import org.xtext.casino.dsl.dsl.Operation;
import org.xtext.casino.dsl.dsl.Property;
import org.xtext.casino.dsl.dsl.ReactApp;
import org.xtext.casino.dsl.dsl.Reducer;
import org.xtext.casino.dsl.dsl.RelationArch;
import org.xtext.casino.dsl.dsl.RelationDom;
import org.xtext.casino.dsl.dsl.RouterComponent;
import org.xtext.casino.dsl.dsl.ServiceFront;
import org.xtext.casino.dsl.dsl.State;
import org.xtext.casino.dsl.dsl.SublayerSegment;
import org.xtext.casino.dsl.dsl.Submodule;
import org.xtext.casino.dsl.dsl.Subproject;
import org.xtext.casino.dsl.dsl.Technology;
import org.xtext.casino.dsl.dsl.Transaction;
import org.xtext.casino.dsl.dsl.Type;
import org.xtext.casino.dsl.dsl.Visualizer;
import org.xtext.casino.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ABSTRACT_CLASS:
				sequence_AbstractClass(context, (AbstractClass) semanticObject); 
				return; 
			case DslPackage.ABSTRACT_METHOD:
				sequence_AbstractMethod(context, (AbstractMethod) semanticObject); 
				return; 
			case DslPackage.ACTION:
				sequence_Action(context, (org.xtext.casino.dsl.dsl.Action) semanticObject); 
				return; 
			case DslPackage.ACTION_CREATOR:
				sequence_ActionCreator(context, (ActionCreator) semanticObject); 
				return; 
			case DslPackage.ACTION_DISPATCHER:
				sequence_ActionDispatcher(context, (ActionDispatcher) semanticObject); 
				return; 
			case DslPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case DslPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case DslPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case DslPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case DslPackage.CSS:
				sequence_Css(context, (Css) semanticObject); 
				return; 
			case DslPackage.DESCRIPTOR:
				sequence_Descriptor(context, (Descriptor) semanticObject); 
				return; 
			case DslPackage.DIRECTORY:
				sequence_Directory(context, (Directory) semanticObject); 
				return; 
			case DslPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case DslPackage.EINTERFACE:
				sequence_Einterface(context, (Einterface) semanticObject); 
				return; 
			case DslPackage.ENTITY_NAME:
				if (rule == grammarAccess.getEntityNameRule()) {
					sequence_EntityName(context, (EntityName) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGeneralEntityRule()) {
					sequence_EntityName_GeneralEntity(context, (EntityName) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSpecialEntityRule()) {
					sequence_EntityName_SpecialEntity(context, (EntityName) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.EPACKAGE:
				sequence_Epackage(context, (Epackage) semanticObject); 
				return; 
			case DslPackage.FUNCTIONALITY:
				sequence_Functionality(context, (Functionality) semanticObject); 
				return; 
			case DslPackage.GENERIC_CLASS:
				sequence_GenericClass(context, (GenericClass) semanticObject); 
				return; 
			case DslPackage.JAVA_APP:
				sequence_JavaApp(context, (JavaApp) semanticObject); 
				return; 
			case DslPackage.JEE_PROJECT:
				sequence_JeeProject(context, (JeeProject) semanticObject); 
				return; 
			case DslPackage.JS:
				sequence_Js(context, (Js) semanticObject); 
				return; 
			case DslPackage.JS_MODULE:
				sequence_JsModule(context, (JsModule) semanticObject); 
				return; 
			case DslPackage.JSON:
				sequence_Json(context, (Json) semanticObject); 
				return; 
			case DslPackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case DslPackage.LAYER_SEGMENT:
				sequence_LayerSegment(context, (LayerSegment) semanticObject); 
				return; 
			case DslPackage.LIBRARY:
				sequence_Library(context, (Library) semanticObject); 
				return; 
			case DslPackage.MD:
				sequence_Md(context, (Md) semanticObject); 
				return; 
			case DslPackage.METHOD_BACK:
				sequence_MethodBack(context, (MethodBack) semanticObject); 
				return; 
			case DslPackage.MODULE:
				sequence_Module(context, (org.xtext.casino.dsl.dsl.Module) semanticObject); 
				return; 
			case DslPackage.NATIVE_CLASS:
				sequence_NativeClass(context, (NativeClass) semanticObject); 
				return; 
			case DslPackage.OPERATESON:
				sequence_Operateson(context, (Operateson) semanticObject); 
				return; 
			case DslPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case DslPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case DslPackage.REACT_APP:
				sequence_ReactApp(context, (ReactApp) semanticObject); 
				return; 
			case DslPackage.REDUCER:
				sequence_Reducer(context, (Reducer) semanticObject); 
				return; 
			case DslPackage.RELATION_ARCH:
				sequence_RelationArch(context, (RelationArch) semanticObject); 
				return; 
			case DslPackage.RELATION_DOM:
				sequence_RelationDom(context, (RelationDom) semanticObject); 
				return; 
			case DslPackage.ROUTER_COMPONENT:
				sequence_RouterComponent(context, (RouterComponent) semanticObject); 
				return; 
			case DslPackage.SERVICE_FRONT:
				sequence_ServiceFront(context, (ServiceFront) semanticObject); 
				return; 
			case DslPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case DslPackage.SUBLAYER_SEGMENT:
				sequence_SublayerSegment(context, (SublayerSegment) semanticObject); 
				return; 
			case DslPackage.SUBMODULE:
				sequence_Submodule(context, (Submodule) semanticObject); 
				return; 
			case DslPackage.SUBPROJECT:
				sequence_Subproject(context, (Subproject) semanticObject); 
				return; 
			case DslPackage.SYSTEM:
				sequence_System(context, (org.xtext.casino.dsl.dsl.System) semanticObject); 
				return; 
			case DslPackage.TECHNOLOGY:
				sequence_Technology(context, (Technology) semanticObject); 
				return; 
			case DslPackage.TRANSACTION:
				sequence_Transaction(context, (Transaction) semanticObject); 
				return; 
			case DslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case DslPackage.VISUALIZER:
				sequence_Visualizer(context, (Visualizer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractClass returns AbstractClass
	 *     Eclass returns AbstractClass
	 *
	 * Constraint:
	 *     (name=ID attribute+=Attribute* methodClass+=MethodBack* annotation=[Annotation|ID]* abstractMethod+=AbstractMethod*)
	 */
	protected void sequence_AbstractClass(ISerializationContext context, AbstractClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMethod returns AbstractMethod
	 *
	 * Constraint:
	 *     (name=ID arg=[Eclass|ID]* type=[Eclass|ID]?)
	 */
	protected void sequence_AbstractMethod(ISerializationContext context, AbstractMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns ActionCreator
	 *     ActionCreator returns ActionCreator
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ActionCreator(ISerializationContext context, ActionCreator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION_CREATOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION_CREATOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionCreatorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns ActionDispatcher
	 *     ActionDispatcher returns ActionDispatcher
	 *
	 * Constraint:
	 *     (name=ID type=[ActionCreator|ID]*)
	 */
	protected void sequence_ActionDispatcher(ISerializationContext context, ActionDispatcher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID actionCreator=[ActionCreator|ID]* actionDispatcher=[ActionDispatcher|ID]* dir=[Directory|ID])
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.casino.dsl.dsl.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Eclass returns Annotation
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (name=ID name=STRING*)
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (componentes+=Component+ relationArch+=RelationArch+)
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=[Eclass|ID])
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeEclassIDTerminalRuleCall_3_0_1(), semanticObject.eGet(DslPackage.Literals.ATTRIBUTE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     layer+=Layer+
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Container
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=ID type=[Directory|ID] type=[ActionDispatcher|ID]? type=[Reducer|ID]* type=[JsModule|ID])
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Css
	 *     File returns Css
	 *     Css returns Css
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Css(ISerializationContext context, Css semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCssAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Descriptor returns Descriptor
	 *
	 * Constraint:
	 *     (name=ID name=STRING)
	 */
	protected void sequence_Descriptor(ISerializationContext context, Descriptor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Directory
	 *     Directory returns Directory
	 *
	 * Constraint:
	 *     (name=ID file=[File|ID]* subdirectory=[Directory|ID]*)
	 */
	protected void sequence_Directory(ISerializationContext context, Directory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (types+=Type* modules+=Module+ relations+=RelationDom+)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Einterface returns Einterface
	 *
	 * Constraint:
	 *     (name=ID attribute+=Attribute* abstractMethod+=AbstractMethod*)
	 */
	protected void sequence_Einterface(ISerializationContext context, Einterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityName returns EntityName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EntityName(ISerializationContext context, EntityName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ENTITY_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ENTITY_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GeneralEntity returns EntityName
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+)
	 */
	protected void sequence_EntityName_GeneralEntity(ISerializationContext context, EntityName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpecialEntity returns EntityName
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+ transactions+=Transaction+)
	 */
	protected void sequence_EntityName_SpecialEntity(ISerializationContext context, EntityName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Epackage returns Epackage
	 *
	 * Constraint:
	 *     (name=ID eclass+=Eclass*)
	 */
	protected void sequence_Epackage(ISerializationContext context, Epackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Functionality
	 *     Functionality returns Functionality
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         route=[RouterComponent|ID]* 
	 *         wrap=[Container|ID]* 
	 *         render=[Visualizer|ID]+ 
	 *         state=[State|ID]* 
	 *         service=[ServiceFront|ID]* 
	 *         type=[Directory|ID]
	 *     )
	 */
	protected void sequence_Functionality(ISerializationContext context, Functionality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericClass returns GenericClass
	 *     Eclass returns GenericClass
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         attribute+=Attribute* 
	 *         methodClass+=MethodBack* 
	 *         annotation=[Annotation|ID]* 
	 *         abs=[AbstractClass|ID]? 
	 *         imp=[Einterface|ID]*
	 *     )
	 */
	protected void sequence_GenericClass(ISerializationContext context, GenericClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JavaApp returns JavaApp
	 *
	 * Constraint:
	 *     jeeproject+=JeeProject
	 */
	protected void sequence_JavaApp(ISerializationContext context, JavaApp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeeProject returns JeeProject
	 *
	 * Constraint:
	 *     (name=ID subproject+=Subproject+)
	 */
	protected void sequence_JeeProject(ISerializationContext context, JeeProject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns JsModule
	 *     JsModule returns JsModule
	 *
	 * Constraint:
	 *     (name=ID type=[Directory|ID])
	 */
	protected void sequence_JsModule(ISerializationContext context, JsModule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JS_MODULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JS_MODULE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.JS_MODULE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.JS_MODULE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsModuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsModuleAccess().getTypeDirectoryIDTerminalRuleCall_4_0_1(), semanticObject.eGet(DslPackage.Literals.JS_MODULE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Js
	 *     File returns Js
	 *     Js returns Js
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Js(ISerializationContext context, Js semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Json
	 *     File returns Json
	 *     Json returns Json
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Json(ISerializationContext context, Json semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LayerSegment returns LayerSegment
	 *
	 * Constraint:
	 *     (name=LayerSegmentName relations+=LayerSegmentRelation* sublayerSegments+=SublayerSegment*)
	 */
	protected void sequence_LayerSegment(ISerializationContext context, LayerSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     (name=LayerName layerSegments+=LayerSegment*)
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Library returns Library
	 *
	 * Constraint:
	 *     (name=ID annotation+=Annotation*)
	 */
	protected void sequence_Library(ISerializationContext context, Library semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Md
	 *     File returns Md
	 *     Md returns Md
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Md(ISerializationContext context, Md semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMdAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MethodBack returns MethodBack
	 *
	 * Constraint:
	 *     (name=ID arg=[Eclass|ID]* type=[Eclass|ID]?)
	 */
	protected void sequence_MethodBack(ISerializationContext context, MethodBack semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=ID submodules+=Submodule+)
	 */
	protected void sequence_Module(ISerializationContext context, org.xtext.casino.dsl.dsl.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NativeClass returns NativeClass
	 *     Eclass returns NativeClass
	 *
	 * Constraint:
	 *     (name=ID attribute+=Attribute* methodClass+=MethodBack*)
	 */
	protected void sequence_NativeClass(ISerializationContext context, NativeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operateson returns Operateson
	 *
	 * Constraint:
	 *     operateson+=EntityName
	 */
	protected void sequence_Operateson(ISerializationContext context, Operateson semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     target+=EntityName
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=[Type|ID])
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeTypeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(DslPackage.Literals.PROPERTY__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns ReactApp
	 *     ReactApp returns ReactApp
	 *
	 * Constraint:
	 *     (elements+=AbstractFrontElement+ func=[Functionality|ID]+ dir=[Directory|ID]+ mod=[JsModule|ID]+)
	 */
	protected void sequence_ReactApp(ISerializationContext context, ReactApp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Reducer
	 *     Reducer returns Reducer
	 *
	 * Constraint:
	 *     (name=ID type=[ActionCreator|ID]+ type=[Directory|ID])
	 */
	protected void sequence_Reducer(ISerializationContext context, Reducer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationArch returns RelationArch
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RelationArch(ISerializationContext context, RelationArch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RELATION_ARCH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RELATION_ARCH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationArchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationDom returns RelationDom
	 *
	 * Constraint:
	 *     (source+=EntityName target+=EntityName)
	 */
	protected void sequence_RelationDom(ISerializationContext context, RelationDom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns RouterComponent
	 *     RouterComponent returns RouterComponent
	 *     UIComponent returns RouterComponent
	 *
	 * Constraint:
	 *     (name=ID type=[Directory|ID] type=[JsModule|ID] route=[UIComponent|ID])
	 */
	protected void sequence_RouterComponent(ISerializationContext context, RouterComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns ServiceFront
	 *     ServiceFront returns ServiceFront
	 *
	 * Constraint:
	 *     (name=ID type=[JsModule|ID])
	 */
	protected void sequence_ServiceFront(ISerializationContext context, ServiceFront semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SERVICE_FRONT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SERVICE_FRONT__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SERVICE_FRONT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SERVICE_FRONT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServiceFrontAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getServiceFrontAccess().getTypeJsModuleIDTerminalRuleCall_4_0_1(), semanticObject.eGet(DslPackage.Literals.SERVICE_FRONT__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns State
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID action=[Action|ID]* reducer=[Reducer|ID]*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SublayerSegment returns SublayerSegment
	 *
	 * Constraint:
	 *     name=SublayerSegmentName
	 */
	protected void sequence_SublayerSegment(ISerializationContext context, SublayerSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SUBLAYER_SEGMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SUBLAYER_SEGMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSublayerSegmentAccess().getNameSublayerSegmentNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Submodule returns Submodule
	 *
	 * Constraint:
	 *     (name=ID operations+=Operation+ (entities+=GeneralEntity | entities+=SpecialEntity)+)
	 */
	protected void sequence_Submodule(ISerializationContext context, Submodule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subproject returns Subproject
	 *
	 * Constraint:
	 *     (name=ID epackage+=Epackage+ library+=Library+ descriptor+=Descriptor+)
	 */
	protected void sequence_Subproject(ISerializationContext context, Subproject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (dom=Domain arch=Architecture tech=Technology)
	 */
	protected void sequence_System(ISerializationContext context, org.xtext.casino.dsl.dsl.System semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__DOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__DOM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__ARCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__ARCH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__TECH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__TECH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemAccess().getDomDomainParserRuleCall_2_0(), semanticObject.getDom());
		feeder.accept(grammarAccess.getSystemAccess().getArchArchitectureParserRuleCall_3_0(), semanticObject.getArch());
		feeder.accept(grammarAccess.getSystemAccess().getTechTechnologyParserRuleCall_4_0(), semanticObject.getTech());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Technology returns Technology
	 *
	 * Constraint:
	 *     (java=JavaApp react=ReactApp)
	 */
	protected void sequence_Technology(ISerializationContext context, Technology semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TECHNOLOGY__JAVA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TECHNOLOGY__JAVA));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TECHNOLOGY__REACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TECHNOLOGY__REACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTechnologyAccess().getJavaJavaAppParserRuleCall_2_0(), semanticObject.getJava());
		feeder.accept(grammarAccess.getTechnologyAccess().getReactReactAppParserRuleCall_3_0(), semanticObject.getReact());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transaction returns Transaction
	 *
	 * Constraint:
	 *     operateson+=Operateson+
	 */
	protected void sequence_Transaction(ISerializationContext context, Transaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *     AbstractFrontElement returns Type
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFrontElement returns Visualizer
	 *     UIComponent returns Visualizer
	 *     Visualizer returns Visualizer
	 *
	 * Constraint:
	 *     (name=ID type=[Directory|ID] type=[JsModule|ID]+)
	 */
	protected void sequence_Visualizer(ISerializationContext context, Visualizer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
