/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.casino.dsl.dsl.Domain;
import org.xtext.casino.dsl.dsl.DslPackage;
import org.xtext.casino.dsl.dsl.GeneralEntity;
import org.xtext.casino.dsl.dsl.Property;
import org.xtext.casino.dsl.dsl.RelationDom;
import org.xtext.casino.dsl.dsl.SpecialEntity;
import org.xtext.casino.dsl.dsl.Submodule;
import org.xtext.casino.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case DslPackage.GENERAL_ENTITY:
				if (rule == grammarAccess.getGeneralEntityRule()
						|| rule == grammarAccess.getTransactionRule()) {
					sequence_GeneralEntity(context, (GeneralEntity) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRelationDomRule()) {
					sequence_GeneralEntity_RelationDom(context, (GeneralEntity) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.MODULE:
				sequence_Module(context, (org.xtext.casino.dsl.dsl.Module) semanticObject); 
				return; 
			case DslPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case DslPackage.RELATION_DOM:
				sequence_RelationDom(context, (RelationDom) semanticObject); 
				return; 
			case DslPackage.SPECIAL_ENTITY:
				sequence_SpecialEntity(context, (SpecialEntity) semanticObject); 
				return; 
			case DslPackage.SUBMODULE:
				sequence_Submodule(context, (Submodule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     modules+=Module+
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GeneralEntity returns GeneralEntity
	 *     Transaction returns GeneralEntity
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+)
	 */
	protected void sequence_GeneralEntity(ISerializationContext context, GeneralEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationDom returns GeneralEntity
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+ type=[SpecialEntity|ID])
	 */
	protected void sequence_GeneralEntity_RelationDom(ISerializationContext context, GeneralEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=ID submodules+=Submodule+)
	 */
	protected void sequence_Module(ISerializationContext context, org.xtext.casino.dsl.dsl.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationDom returns RelationDom
	 *
	 * Constraint:
	 *     type=[GeneralEntity|ID]
	 */
	protected void sequence_RelationDom(ISerializationContext context, RelationDom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RELATION_DOM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RELATION_DOM__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationDomAccess().getTypeGeneralEntityIDTerminalRuleCall_1_0_0_1(), semanticObject.eGet(DslPackage.Literals.RELATION_DOM__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecialEntity returns SpecialEntity
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+ transactions+=Transaction+)
	 */
	protected void sequence_SpecialEntity(ISerializationContext context, SpecialEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Submodule returns Submodule
	 *
	 * Constraint:
	 *     (name=ID operations+=Operation+ (entities+=SpecialEntity | entities+=GeneralEntity)+ relations+=RelationDom+)
	 */
	protected void sequence_Submodule(ISerializationContext context, Submodule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
