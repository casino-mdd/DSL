/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.casino.dsl.dsl.Architecture;
import org.xtext.casino.dsl.dsl.Component;
import org.xtext.casino.dsl.dsl.Domain;
import org.xtext.casino.dsl.dsl.DslPackage;
import org.xtext.casino.dsl.dsl.Entity;
import org.xtext.casino.dsl.dsl.Layer;
import org.xtext.casino.dsl.dsl.LayerSegment;
import org.xtext.casino.dsl.dsl.Operateson;
import org.xtext.casino.dsl.dsl.Operation;
import org.xtext.casino.dsl.dsl.Property;
import org.xtext.casino.dsl.dsl.QualifiedName;
import org.xtext.casino.dsl.dsl.RelationArch;
import org.xtext.casino.dsl.dsl.RelationDom;
import org.xtext.casino.dsl.dsl.SublayerSegment;
import org.xtext.casino.dsl.dsl.Submodule;
import org.xtext.casino.dsl.dsl.Technology;
import org.xtext.casino.dsl.dsl.Transaction;
import org.xtext.casino.dsl.dsl.Type;
import org.xtext.casino.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case DslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case DslPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case DslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DslPackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case DslPackage.LAYER_SEGMENT:
				sequence_LayerSegment(context, (LayerSegment) semanticObject); 
				return; 
			case DslPackage.MODULE:
				sequence_Module(context, (org.xtext.casino.dsl.dsl.Module) semanticObject); 
				return; 
			case DslPackage.OPERATESON:
				sequence_Operateson(context, (Operateson) semanticObject); 
				return; 
			case DslPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case DslPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case DslPackage.QUALIFIED_NAME:
				if (rule == grammarAccess.getGeneralEntityRule()) {
					sequence_GeneralEntity_QualifiedName(context, (QualifiedName) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstractElementRule()) {
					sequence_GeneralEntity_QualifiedName_SpecialEntity(context, (QualifiedName) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQualifiedNameRule()) {
					sequence_QualifiedName(context, (QualifiedName) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSpecialEntityRule()) {
					sequence_QualifiedName_SpecialEntity(context, (QualifiedName) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.RELATION_ARCH:
				sequence_RelationArch(context, (RelationArch) semanticObject); 
				return; 
			case DslPackage.RELATION_DOM:
				sequence_RelationDom(context, (RelationDom) semanticObject); 
				return; 
			case DslPackage.SUBLAYER_SEGMENT:
				sequence_SublayerSegment(context, (SublayerSegment) semanticObject); 
				return; 
			case DslPackage.SUBMODULE:
				sequence_Submodule(context, (Submodule) semanticObject); 
				return; 
			case DslPackage.SYSTEM:
				sequence_System(context, (org.xtext.casino.dsl.dsl.System) semanticObject); 
				return; 
			case DslPackage.TECHNOLOGY:
				sequence_Technology(context, (Technology) semanticObject); 
				return; 
			case DslPackage.TRANSACTION:
				sequence_Transaction(context, (Transaction) semanticObject); 
				return; 
			case DslPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (componentes+=Component+ relationArch+=RelationArch+)
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     layer+=Layer+
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (elements+=AbstractElement* modules+=Module+ relations+=RelationDom+)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     type=[QualifiedName|ID]
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ENTITY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ENTITY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityAccess().getTypeQualifiedNameIDTerminalRuleCall_0_1(), semanticObject.eGet(DslPackage.Literals.ENTITY__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GeneralEntity returns QualifiedName
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+)
	 */
	protected void sequence_GeneralEntity_QualifiedName(ISerializationContext context, QualifiedName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns QualifiedName
	 *
	 * Constraint:
	 *     (name=ID (properties+=Property+ | (properties+=Property+ transactions+=Transaction+)))
	 */
	protected void sequence_GeneralEntity_QualifiedName_SpecialEntity(ISerializationContext context, QualifiedName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerSegment returns LayerSegment
	 *
	 * Constraint:
	 *     (name=LayerSegmentName relations+=LayerSegmentRelation* sublayerSegments+=SublayerSegment*)
	 */
	protected void sequence_LayerSegment(ISerializationContext context, LayerSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     (name=LayerName layerSegments+=LayerSegment*)
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=ID submodules+=Submodule+)
	 */
	protected void sequence_Module(ISerializationContext context, org.xtext.casino.dsl.dsl.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operateson returns Operateson
	 *
	 * Constraint:
	 *     type=[GeneralEntity|ID]
	 */
	protected void sequence_Operateson(ISerializationContext context, Operateson semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.OPERATESON__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.OPERATESON__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperatesonAccess().getTypeGeneralEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DslPackage.Literals.OPERATESON__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     target+=Entity
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID type=[Type|ID])
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeTypeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(DslPackage.Literals.PROPERTY__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QualifiedName returns QualifiedName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_QualifiedName(ISerializationContext context, QualifiedName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.QUALIFIED_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.QUALIFIED_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualifiedNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecialEntity returns QualifiedName
	 *
	 * Constraint:
	 *     (name=ID properties+=Property+ transactions+=Transaction+)
	 */
	protected void sequence_QualifiedName_SpecialEntity(ISerializationContext context, QualifiedName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationArch returns RelationArch
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RelationArch(ISerializationContext context, RelationArch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.RELATION_ARCH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.RELATION_ARCH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationArchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationDom returns RelationDom
	 *
	 * Constraint:
	 *     (type=[GeneralEntity|ID] target+=Entity)
	 */
	protected void sequence_RelationDom(ISerializationContext context, RelationDom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SublayerSegment returns SublayerSegment
	 *
	 * Constraint:
	 *     name=SublayerSegmentName
	 */
	protected void sequence_SublayerSegment(ISerializationContext context, SublayerSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SUBLAYER_SEGMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SUBLAYER_SEGMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSublayerSegmentAccess().getNameSublayerSegmentNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Submodule returns Submodule
	 *
	 * Constraint:
	 *     (name=ID operations+=Operation+ entities+=Entity+)
	 */
	protected void sequence_Submodule(ISerializationContext context, Submodule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (dom=Domain arch=Architecture tech=Technology)
	 */
	protected void sequence_System(ISerializationContext context, org.xtext.casino.dsl.dsl.System semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__DOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__DOM));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__ARCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__ARCH));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SYSTEM__TECH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SYSTEM__TECH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemAccess().getDomDomainParserRuleCall_2_0(), semanticObject.getDom());
		feeder.accept(grammarAccess.getSystemAccess().getArchArchitectureParserRuleCall_3_0(), semanticObject.getArch());
		feeder.accept(grammarAccess.getSystemAccess().getTechTechnologyParserRuleCall_4_0(), semanticObject.getTech());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Technology returns Technology
	 *
	 * Constraint:
	 *     (java=JavaApp react=ReactApp)
	 */
	protected void sequence_Technology(ISerializationContext context, Technology semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TECHNOLOGY__JAVA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TECHNOLOGY__JAVA));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TECHNOLOGY__REACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TECHNOLOGY__REACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTechnologyAccess().getJavaJavaAppParserRuleCall_2_0(), semanticObject.getJava());
		feeder.accept(grammarAccess.getTechnologyAccess().getReactReactAppParserRuleCall_3_0(), semanticObject.getReact());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transaction returns Transaction
	 *
	 * Constraint:
	 *     operateson+=Operateson+
	 */
	protected void sequence_Transaction(ISerializationContext context, Transaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Type
	 *     Type returns Type
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
