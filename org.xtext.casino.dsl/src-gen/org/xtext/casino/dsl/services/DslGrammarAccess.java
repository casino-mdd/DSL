/*
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecialEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGeneralEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRelationDomParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractElement:
		//	Domain | SpecialEntity | GeneralEntity | RelationDom | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Domain | SpecialEntity | GeneralEntity | RelationDom | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Domain
		public RuleCall getDomainParserRuleCall_0() { return cDomainParserRuleCall_0; }
		
		//SpecialEntity
		public RuleCall getSpecialEntityParserRuleCall_1() { return cSpecialEntityParserRuleCall_1; }
		
		//GeneralEntity
		public RuleCall getGeneralEntityParserRuleCall_2() { return cGeneralEntityParserRuleCall_2; }
		
		//RelationDom
		public RuleCall getRelationDomParserRuleCall_3() { return cRelationDomParserRuleCall_3; }
		
		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModulesModuleParserRuleCall_2_0 = (RuleCall)cModulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Domain:
		//	'domain' '{'
		//	modules+=Module+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' '{' modules+=Module+ '}'
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//modules+=Module+
		public Assignment getModulesAssignment_2() { return cModulesAssignment_2; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_2_0() { return cModulesModuleParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubmodulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubmodulesSubmoduleParserRuleCall_3_0 = (RuleCall)cSubmodulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Module:
		//	'module' name=ID '{'
		//	submodules+=Submodule+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=ID '{' submodules+=Submodule+ '}'
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//submodules+=Submodule+
		public Assignment getSubmodulesAssignment_3() { return cSubmodulesAssignment_3; }
		
		//Submodule
		public RuleCall getSubmodulesSubmoduleParserRuleCall_3_0() { return cSubmodulesSubmoduleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SubmoduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Submodule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubmoduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationsOperationParserRuleCall_3_0 = (RuleCall)cOperationsAssignment_3.eContents().get(0);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Submodule:
		//	'submodule' name=ID '{'
		//	operations+=Operation+
		//	entities+=Entity+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'submodule' name=ID '{' operations+=Operation+ entities+=Entity+ '}'
		public Group getGroup() { return cGroup; }
		
		//'submodule'
		public Keyword getSubmoduleKeyword_0() { return cSubmoduleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//operations+=Operation+
		public Assignment getOperationsAssignment_3() { return cOperationsAssignment_3; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_3_0() { return cOperationsOperationParserRuleCall_3_0; }
		
		//entities+=Entity+
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Entity");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeQualifiedNameCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeQualifiedNameIDTerminalRuleCall_0_1 = (RuleCall)cTypeQualifiedNameCrossReference_0.eContents().get(1);
		
		//Entity:
		//	type=[QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[QualifiedName]
		public CrossReference getTypeQualifiedNameCrossReference_0() { return cTypeQualifiedNameCrossReference_0; }
		
		//ID
		public RuleCall getTypeQualifiedNameIDTerminalRuleCall_0_1() { return cTypeQualifiedNameIDTerminalRuleCall_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.QualifiedName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//QualifiedName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSubOperationParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operation:
		//	'op' '{'
		//	'type:' SubOperation
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'op' '{' 'type:' SubOperation '}'
		public Group getGroup() { return cGroup; }
		
		//'op'
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type:'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//SubOperation
		public RuleCall getSubOperationParserRuleCall_3() { return cSubOperationParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SubOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.SubOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SubOperation:
		//	'Read' | 'Create';
		@Override public ParserRule getRule() { return rule; }
		
		//'Read' | 'Create'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//'Create'
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }
	}
	public class GeneralEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.GeneralEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneralEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GeneralEntity:
		//	'generalEntity' QualifiedName '{'
		//	properties+=Property+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'generalEntity' QualifiedName '{' properties+=Property+ '}'
		public Group getGroup() { return cGroup; }
		
		//'generalEntity'
		public Keyword getGeneralEntityKeyword_0() { return cGeneralEntityKeyword_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=Property+
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		//Property:
		//	name=ID ':' type=[Type];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Type]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Type:
		//	'dataType' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'dataType' name=ID
		public Group getGroup() { return cGroup; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_0() { return cDataTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpecialEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.SpecialEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecialEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final RuleCall cRoleParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTransactionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransactionsTransactionParserRuleCall_5_0 = (RuleCall)cTransactionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SpecialEntity:
		//	'specialEntity' QualifiedName '{'
		//	properties+=Property+
		//	Role
		//	transactions+=Transaction+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'specialEntity' QualifiedName '{' properties+=Property+ Role transactions+=Transaction+ '}'
		public Group getGroup() { return cGroup; }
		
		//'specialEntity'
		public Keyword getSpecialEntityKeyword_0() { return cSpecialEntityKeyword_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=Property+
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//Role
		public RuleCall getRoleParserRuleCall_4() { return cRoleParserRuleCall_4; }
		
		//transactions+=Transaction+
		public Assignment getTransactionsAssignment_5() { return cTransactionsAssignment_5; }
		
		//Transaction
		public RuleCall getTransactionsTransactionParserRuleCall_5_0() { return cTransactionsTransactionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAdminKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAuxKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Role:
		//	'role:' ('Admin' | 'Aux');
		@Override public ParserRule getRule() { return rule; }
		
		//'role:' ('Admin' | 'Aux')
		public Group getGroup() { return cGroup; }
		
		//'role:'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//'Admin' | 'Aux'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Admin'
		public Keyword getAdminKeyword_1_0() { return cAdminKeyword_1_0; }
		
		//'Aux'
		public Keyword getAuxKeyword_1_1() { return cAuxKeyword_1_1; }
	}
	public class TransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Transaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSubTransactionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOperatesonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatesonOperatesonParserRuleCall_4_0 = (RuleCall)cOperatesonAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transaction:
		//	'trx' '{'
		//	'type:' SubTransaction
		//	operateson+=Operateson+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'trx' '{' 'type:' SubTransaction operateson+=Operateson+ '}'
		public Group getGroup() { return cGroup; }
		
		//'trx'
		public Keyword getTrxKeyword_0() { return cTrxKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type:'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//SubTransaction
		public RuleCall getSubTransactionParserRuleCall_3() { return cSubTransactionParserRuleCall_3; }
		
		//operateson+=Operateson+
		public Assignment getOperatesonAssignment_4() { return cOperatesonAssignment_4; }
		
		//Operateson
		public RuleCall getOperatesonOperatesonParserRuleCall_4_0() { return cOperatesonOperatesonParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class OperatesonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.Operateson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperates_onKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeGeneralEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeGeneralEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeGeneralEntityCrossReference_1_0.eContents().get(1);
		
		//Operateson:
		//	'operates_on:' type=[GeneralEntity];
		@Override public ParserRule getRule() { return rule; }
		
		//'operates_on:' type=[GeneralEntity]
		public Group getGroup() { return cGroup; }
		
		//'operates_on:'
		public Keyword getOperates_onKeyword_0() { return cOperates_onKeyword_0; }
		
		//type=[GeneralEntity]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[GeneralEntity]
		public CrossReference getTypeGeneralEntityCrossReference_1_0() { return cTypeGeneralEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeGeneralEntityIDTerminalRuleCall_1_0_1() { return cTypeGeneralEntityIDTerminalRuleCall_1_0_1; }
	}
	public class SubTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.SubTransaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExchangeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSaleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SubTransaction:
		//	'exchange' | 'sale';
		@Override public ParserRule getRule() { return rule; }
		
		//'exchange' | 'sale'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'exchange'
		public Keyword getExchangeKeyword_0() { return cExchangeKeyword_0; }
		
		//'sale'
		public Keyword getSaleKeyword_1() { return cSaleKeyword_1; }
	}
	public class RelationDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.casino.dsl.Dsl.RelationDom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCompositionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSourceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeGeneralEntityCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeGeneralEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeGeneralEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetEntityParserRuleCall_7_0 = (RuleCall)cTargetAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RelationDom:
		//	'rel' '{'
		//	'type:' 'Composition'
		//	'source:' type=[GeneralEntity]
		//	'target:' target+=Entity
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rel' '{' 'type:' 'Composition' 'source:' type=[GeneralEntity] 'target:' target+=Entity '}'
		public Group getGroup() { return cGroup; }
		
		//'rel'
		public Keyword getRelKeyword_0() { return cRelKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type:'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//'Composition'
		public Keyword getCompositionKeyword_3() { return cCompositionKeyword_3; }
		
		//'source:'
		public Keyword getSourceKeyword_4() { return cSourceKeyword_4; }
		
		//type=[GeneralEntity]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[GeneralEntity]
		public CrossReference getTypeGeneralEntityCrossReference_5_0() { return cTypeGeneralEntityCrossReference_5_0; }
		
		//ID
		public RuleCall getTypeGeneralEntityIDTerminalRuleCall_5_0_1() { return cTypeGeneralEntityIDTerminalRuleCall_5_0_1; }
		
		//'target:'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//target+=Entity
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//Entity
		public RuleCall getTargetEntityParserRuleCall_7_0() { return cTargetEntityParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final AbstractElementElements pAbstractElement;
	private final DomainElements pDomain;
	private final ModuleElements pModule;
	private final SubmoduleElements pSubmodule;
	private final EntityElements pEntity;
	private final QualifiedNameElements pQualifiedName;
	private final OperationElements pOperation;
	private final SubOperationElements pSubOperation;
	private final GeneralEntityElements pGeneralEntity;
	private final PropertyElements pProperty;
	private final TypeElements pType;
	private final SpecialEntityElements pSpecialEntity;
	private final RoleElements pRole;
	private final TransactionElements pTransaction;
	private final OperatesonElements pOperateson;
	private final SubTransactionElements pSubTransaction;
	private final RelationDomElements pRelationDom;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pDomain = new DomainElements();
		this.pModule = new ModuleElements();
		this.pSubmodule = new SubmoduleElements();
		this.pEntity = new EntityElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pOperation = new OperationElements();
		this.pSubOperation = new SubOperationElements();
		this.pGeneralEntity = new GeneralEntityElements();
		this.pProperty = new PropertyElements();
		this.pType = new TypeElements();
		this.pSpecialEntity = new SpecialEntityElements();
		this.pRole = new RoleElements();
		this.pTransaction = new TransactionElements();
		this.pOperateson = new OperatesonElements();
		this.pSubTransaction = new SubTransactionElements();
		this.pRelationDom = new RelationDomElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.casino.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//AbstractElement:
	//	Domain | SpecialEntity | GeneralEntity | RelationDom | Type;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Domain:
	//	'domain' '{'
	//	modules+=Module+
	//	'}';
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Module:
	//	'module' name=ID '{'
	//	submodules+=Submodule+
	//	'}';
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Submodule:
	//	'submodule' name=ID '{'
	//	operations+=Operation+
	//	entities+=Entity+
	//	'}';
	public SubmoduleElements getSubmoduleAccess() {
		return pSubmodule;
	}
	
	public ParserRule getSubmoduleRule() {
		return getSubmoduleAccess().getRule();
	}
	
	//Entity:
	//	type=[QualifiedName];
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//QualifiedName:
	//	name=ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Operation:
	//	'op' '{'
	//	'type:' SubOperation
	//	'}';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//SubOperation:
	//	'Read' | 'Create';
	public SubOperationElements getSubOperationAccess() {
		return pSubOperation;
	}
	
	public ParserRule getSubOperationRule() {
		return getSubOperationAccess().getRule();
	}
	
	//GeneralEntity:
	//	'generalEntity' QualifiedName '{'
	//	properties+=Property+
	//	'}';
	public GeneralEntityElements getGeneralEntityAccess() {
		return pGeneralEntity;
	}
	
	public ParserRule getGeneralEntityRule() {
		return getGeneralEntityAccess().getRule();
	}
	
	//Property:
	//	name=ID ':' type=[Type];
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Type:
	//	'dataType' name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//SpecialEntity:
	//	'specialEntity' QualifiedName '{'
	//	properties+=Property+
	//	Role
	//	transactions+=Transaction+
	//	'}';
	public SpecialEntityElements getSpecialEntityAccess() {
		return pSpecialEntity;
	}
	
	public ParserRule getSpecialEntityRule() {
		return getSpecialEntityAccess().getRule();
	}
	
	//Role:
	//	'role:' ('Admin' | 'Aux');
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//Transaction:
	//	'trx' '{'
	//	'type:' SubTransaction
	//	operateson+=Operateson+
	//	'}';
	public TransactionElements getTransactionAccess() {
		return pTransaction;
	}
	
	public ParserRule getTransactionRule() {
		return getTransactionAccess().getRule();
	}
	
	//Operateson:
	//	'operates_on:' type=[GeneralEntity];
	public OperatesonElements getOperatesonAccess() {
		return pOperateson;
	}
	
	public ParserRule getOperatesonRule() {
		return getOperatesonAccess().getRule();
	}
	
	//SubTransaction:
	//	'exchange' | 'sale';
	public SubTransactionElements getSubTransactionAccess() {
		return pSubTransaction;
	}
	
	public ParserRule getSubTransactionRule() {
		return getSubTransactionAccess().getRule();
	}
	
	//RelationDom:
	//	'rel' '{'
	//	'type:' 'Composition'
	//	'source:' type=[GeneralEntity]
	//	'target:' target+=Entity
	//	'}';
	public RelationDomElements getRelationDomAccess() {
		return pRelationDom;
	}
	
	public ParserRule getRelationDomRule() {
		return getRelationDomAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
