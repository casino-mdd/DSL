/*
 * generated by Xtext 2.18.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.casino.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.casino.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.casino.dsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.casino.dsl.Dsl.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getDomainParserRuleCall_0());
		}
		this_Domain_0=ruleDomain
		{
			$current = $this_Domain_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getSpecialEntityParserRuleCall_1());
		}
		this_SpecialEntity_1=ruleSpecialEntity
		{
			$current = $this_SpecialEntity_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getGeneralEntityParserRuleCall_2());
		}
		this_GeneralEntity_2=ruleGeneralEntity
		{
			$current = $this_GeneralEntity_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getRelationDomParserRuleCall_3());
		}
		this_RelationDom_3=ruleRelationDom
		{
			$current = $this_RelationDom_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getTypeParserRuleCall_4());
		}
		this_Type_4=ruleType
		{
			$current = $this_Type_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	iv_ruleDomain=ruleDomain
	{ $current=$iv_ruleDomain.current; }
	EOF;

// Rule Domain
ruleDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='domain'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainAccess().getDomainKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getDomainAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainAccess().getModulesModuleParserRuleCall_2_0());
				}
				lv_modules_2_0=ruleModule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainRule());
					}
					add(
						$current,
						"modules",
						lv_modules_2_0,
						"org.xtext.casino.dsl.Dsl.Module");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getDomainAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='module'
		{
			newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getSubmodulesSubmoduleParserRuleCall_3_0());
				}
				lv_submodules_3_0=ruleSubmodule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"submodules",
						lv_submodules_3_0,
						"org.xtext.casino.dsl.Dsl.Submodule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSubmodule
entryRuleSubmodule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubmoduleRule()); }
	iv_ruleSubmodule=ruleSubmodule
	{ $current=$iv_ruleSubmodule.current; }
	EOF;

// Rule Submodule
ruleSubmodule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='submodule'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubmoduleAccess().getSubmoduleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSubmoduleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubmoduleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSubmoduleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubmoduleAccess().getOperationsOperationParserRuleCall_3_0());
				}
				lv_operations_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubmoduleRule());
					}
					add(
						$current,
						"operations",
						lv_operations_3_0,
						"org.xtext.casino.dsl.Dsl.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getSubmoduleAccess().getEntitiesEntityParserRuleCall_4_0());
				}
				lv_entities_4_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubmoduleRule());
					}
					add(
						$current,
						"entities",
						lv_entities_4_0,
						"org.xtext.casino.dsl.Dsl.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSubmoduleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEntityRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getTypeQualifiedNameCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current; }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getQualifiedNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getQualifiedNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current.getText(); }
	EOF;

// Rule Operation
ruleOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='op'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperationAccess().getOpKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_1());
		}
		kw='type:'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperationAccess().getTypeKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getOperationAccess().getSubOperationParserRuleCall_3());
		}
		this_SubOperation_3=ruleSubOperation
		{
			$current.merge(this_SubOperation_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSubOperation
entryRuleSubOperation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSubOperationRule()); }
	iv_ruleSubOperation=ruleSubOperation
	{ $current=$iv_ruleSubOperation.current.getText(); }
	EOF;

// Rule SubOperation
ruleSubOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Read'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubOperationAccess().getReadKeyword_0());
		}
		    |
		kw='Create'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubOperationAccess().getCreateKeyword_1());
		}
	)
;

// Entry rule entryRuleGeneralEntity
entryRuleGeneralEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralEntityRule()); }
	iv_ruleGeneralEntity=ruleGeneralEntity
	{ $current=$iv_ruleGeneralEntity.current; }
	EOF;

// Rule GeneralEntity
ruleGeneralEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='generalEntity'
		{
			newLeafNode(otherlv_0, grammarAccess.getGeneralEntityAccess().getGeneralEntityKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGeneralEntityAccess().getQualifiedNameParserRuleCall_1());
		}
		this_QualifiedName_1=ruleQualifiedName
		{
			$current = $this_QualifiedName_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGeneralEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneralEntityAccess().getPropertiesPropertyParserRuleCall_3_0());
				}
				lv_properties_3_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneralEntityRule());
					}
					add(
						$current,
						"properties",
						lv_properties_3_0,
						"org.xtext.casino.dsl.Dsl.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGeneralEntityAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getTypeTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dataType'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getDataTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSpecialEntity
entryRuleSpecialEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecialEntityRule()); }
	iv_ruleSpecialEntity=ruleSpecialEntity
	{ $current=$iv_ruleSpecialEntity.current; }
	EOF;

// Rule SpecialEntity
ruleSpecialEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='specialEntity'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpecialEntityAccess().getSpecialEntityKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSpecialEntityAccess().getQualifiedNameParserRuleCall_1());
		}
		this_QualifiedName_1=ruleQualifiedName
		{
			$current = $this_QualifiedName_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSpecialEntityAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialEntityAccess().getPropertiesPropertyParserRuleCall_3_0());
				}
				lv_properties_3_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialEntityRule());
					}
					add(
						$current,
						"properties",
						lv_properties_3_0,
						"org.xtext.casino.dsl.Dsl.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		{
			newCompositeNode(grammarAccess.getSpecialEntityAccess().getRoleParserRuleCall_4());
		}
		ruleRole
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialEntityAccess().getTransactionsTransactionParserRuleCall_5_0());
				}
				lv_transactions_5_0=ruleTransaction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialEntityRule());
					}
					add(
						$current,
						"transactions",
						lv_transactions_5_0,
						"org.xtext.casino.dsl.Dsl.Transaction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSpecialEntityAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current.getText(); }
	EOF;

// Rule Role
ruleRole returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='role:'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRoleAccess().getRoleKeyword_0());
		}
		(
			kw='Admin'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRoleAccess().getAdminKeyword_1_0());
			}
			    |
			kw='Aux'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRoleAccess().getAuxKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleTransaction
entryRuleTransaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransactionRule()); }
	iv_ruleTransaction=ruleTransaction
	{ $current=$iv_ruleTransaction.current; }
	EOF;

// Rule Transaction
ruleTransaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='trx'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransactionAccess().getTrxKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransactionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='type:'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransactionAccess().getTypeKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getTransactionAccess().getSubTransactionParserRuleCall_3());
		}
		ruleSubTransaction
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransactionAccess().getOperatesonOperatesonParserRuleCall_4_0());
				}
				lv_operateson_4_0=ruleOperateson
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransactionRule());
					}
					add(
						$current,
						"operateson",
						lv_operateson_4_0,
						"org.xtext.casino.dsl.Dsl.Operateson");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTransactionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleOperateson
entryRuleOperateson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatesonRule()); }
	iv_ruleOperateson=ruleOperateson
	{ $current=$iv_ruleOperateson.current; }
	EOF;

// Rule Operateson
ruleOperateson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operates_on:'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperatesonAccess().getOperates_onKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatesonRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOperatesonAccess().getTypeGeneralEntityCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSubTransaction
entryRuleSubTransaction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSubTransactionRule()); }
	iv_ruleSubTransaction=ruleSubTransaction
	{ $current=$iv_ruleSubTransaction.current.getText(); }
	EOF;

// Rule SubTransaction
ruleSubTransaction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='exchange'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubTransactionAccess().getExchangeKeyword_0());
		}
		    |
		kw='sale'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubTransactionAccess().getSaleKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationDom
entryRuleRelationDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationDomRule()); }
	iv_ruleRelationDom=ruleRelationDom
	{ $current=$iv_ruleRelationDom.current; }
	EOF;

// Rule RelationDom
ruleRelationDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rel'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationDomAccess().getRelKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationDomAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='type:'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelationDomAccess().getTypeKeyword_2());
		}
		otherlv_3='Composition'
		{
			newLeafNode(otherlv_3, grammarAccess.getRelationDomAccess().getCompositionKeyword_3());
		}
		otherlv_4='source:'
		{
			newLeafNode(otherlv_4, grammarAccess.getRelationDomAccess().getSourceKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationDomRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getRelationDomAccess().getTypeGeneralEntityCrossReference_5_0());
				}
			)
		)
		otherlv_6='target:'
		{
			newLeafNode(otherlv_6, grammarAccess.getRelationDomAccess().getTargetKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationDomAccess().getTargetEntityParserRuleCall_7_0());
				}
				lv_target_7_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationDomRule());
					}
					add(
						$current,
						"target",
						lv_target_7_0,
						"org.xtext.casino.dsl.Dsl.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getRelationDomAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
