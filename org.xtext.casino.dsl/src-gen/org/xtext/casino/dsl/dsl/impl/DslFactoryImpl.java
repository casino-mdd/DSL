/**
 * generated by Xtext 2.18.0
 */
package org.xtext.casino.dsl.dsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.casino.dsl.dsl.AbstractElement;
import org.xtext.casino.dsl.dsl.Architecture;
import org.xtext.casino.dsl.dsl.Component;
import org.xtext.casino.dsl.dsl.Domain;
import org.xtext.casino.dsl.dsl.DslFactory;
import org.xtext.casino.dsl.dsl.DslPackage;
import org.xtext.casino.dsl.dsl.Entity;
import org.xtext.casino.dsl.dsl.GeneralEntity;
import org.xtext.casino.dsl.dsl.Layer;
import org.xtext.casino.dsl.dsl.LayerSegment;
import org.xtext.casino.dsl.dsl.Operateson;
import org.xtext.casino.dsl.dsl.Operation;
import org.xtext.casino.dsl.dsl.Property;
import org.xtext.casino.dsl.dsl.QualifiedName;
import org.xtext.casino.dsl.dsl.RelationArch;
import org.xtext.casino.dsl.dsl.RelationDom;
import org.xtext.casino.dsl.dsl.SpecialEntity;
import org.xtext.casino.dsl.dsl.SublayerSegment;
import org.xtext.casino.dsl.dsl.Submodule;
import org.xtext.casino.dsl.dsl.Technology;
import org.xtext.casino.dsl.dsl.Transaction;
import org.xtext.casino.dsl.dsl.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DslFactoryImpl extends EFactoryImpl implements DslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DslFactory init()
  {
    try
    {
      DslFactory theDslFactory = (DslFactory)EPackage.Registry.INSTANCE.getEFactory(DslPackage.eNS_URI);
      if (theDslFactory != null)
      {
        return theDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DslPackage.SYSTEM: return createSystem();
      case DslPackage.DOMAIN: return createDomain();
      case DslPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case DslPackage.MODULE: return createModule();
      case DslPackage.SUBMODULE: return createSubmodule();
      case DslPackage.ENTITY: return createEntity();
      case DslPackage.QUALIFIED_NAME: return createQualifiedName();
      case DslPackage.OPERATION: return createOperation();
      case DslPackage.GENERAL_ENTITY: return createGeneralEntity();
      case DslPackage.PROPERTY: return createProperty();
      case DslPackage.TYPE: return createType();
      case DslPackage.SPECIAL_ENTITY: return createSpecialEntity();
      case DslPackage.TRANSACTION: return createTransaction();
      case DslPackage.OPERATESON: return createOperateson();
      case DslPackage.RELATION_DOM: return createRelationDom();
      case DslPackage.ARCHITECTURE: return createArchitecture();
      case DslPackage.COMPONENT: return createComponent();
      case DslPackage.LAYER: return createLayer();
      case DslPackage.LAYER_SEGMENT: return createLayerSegment();
      case DslPackage.SUBLAYER_SEGMENT: return createSublayerSegment();
      case DslPackage.RELATION_ARCH: return createRelationArch();
      case DslPackage.TECHNOLOGY: return createTechnology();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.casino.dsl.dsl.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.casino.dsl.dsl.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Submodule createSubmodule()
  {
    SubmoduleImpl submodule = new SubmoduleImpl();
    return submodule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualifiedName createQualifiedName()
  {
    QualifiedNameImpl qualifiedName = new QualifiedNameImpl();
    return qualifiedName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralEntity createGeneralEntity()
  {
    GeneralEntityImpl generalEntity = new GeneralEntityImpl();
    return generalEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialEntity createSpecialEntity()
  {
    SpecialEntityImpl specialEntity = new SpecialEntityImpl();
    return specialEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transaction createTransaction()
  {
    TransactionImpl transaction = new TransactionImpl();
    return transaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operateson createOperateson()
  {
    OperatesonImpl operateson = new OperatesonImpl();
    return operateson;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationDom createRelationDom()
  {
    RelationDomImpl relationDom = new RelationDomImpl();
    return relationDom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Architecture createArchitecture()
  {
    ArchitectureImpl architecture = new ArchitectureImpl();
    return architecture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Layer createLayer()
  {
    LayerImpl layer = new LayerImpl();
    return layer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LayerSegment createLayerSegment()
  {
    LayerSegmentImpl layerSegment = new LayerSegmentImpl();
    return layerSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SublayerSegment createSublayerSegment()
  {
    SublayerSegmentImpl sublayerSegment = new SublayerSegmentImpl();
    return sublayerSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationArch createRelationArch()
  {
    RelationArchImpl relationArch = new RelationArchImpl();
    return relationArch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Technology createTechnology()
  {
    TechnologyImpl technology = new TechnologyImpl();
    return technology;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DslPackage getDslPackage()
  {
    return (DslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DslPackage getPackage()
  {
    return DslPackage.eINSTANCE;
  }

} //DslFactoryImpl
